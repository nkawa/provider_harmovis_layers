// source: movingFeatures.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.AbstractTrajectory', null, global);
goog.exportSymbol('proto.AttrDef', null, global);
goog.exportSymbol('proto.Foliation', null, global);
goog.exportSymbol('proto.Header', null, global);
goog.exportSymbol('proto.Member', null, global);
goog.exportSymbol('proto.MovingFeature', null, global);
goog.exportSymbol('proto.MovingFeatures', null, global);
goog.exportSymbol('proto.OrderType', null, global);
goog.exportSymbol('proto.TBoundedBy', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MovingFeatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MovingFeatures.repeatedFields_, null);
};
goog.inherits(proto.MovingFeatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MovingFeatures.displayName = 'proto.MovingFeatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TBoundedBy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TBoundedBy.repeatedFields_, null);
};
goog.inherits(proto.TBoundedBy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TBoundedBy.displayName = 'proto.TBoundedBy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Member.displayName = 'proto.Member';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MovingFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MovingFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MovingFeature.displayName = 'proto.MovingFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Header.repeatedFields_, null);
};
goog.inherits(proto.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Header.displayName = 'proto.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AttrDef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AttrDef.repeatedFields_, null);
};
goog.inherits(proto.AttrDef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AttrDef.displayName = 'proto.AttrDef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Foliation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Foliation.repeatedFields_, null);
};
goog.inherits(proto.Foliation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Foliation.displayName = 'proto.Foliation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AbstractTrajectory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AbstractTrajectory.repeatedFields_, null);
};
goog.inherits(proto.AbstractTrajectory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AbstractTrajectory.displayName = 'proto.AbstractTrajectory';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MovingFeatures.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MovingFeatures.prototype.toObject = function(opt_includeInstance) {
  return proto.MovingFeatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MovingFeatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MovingFeatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    boundedby: (f = msg.getBoundedby()) && proto.TBoundedBy.toObject(includeInstance, f),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.Member.toObject, includeInstance),
    header: (f = msg.getHeader()) && proto.Header.toObject(includeInstance, f),
    foliation: (f = msg.getFoliation()) && proto.Foliation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MovingFeatures}
 */
proto.MovingFeatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MovingFeatures;
  return proto.MovingFeatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MovingFeatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MovingFeatures}
 */
proto.MovingFeatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TBoundedBy;
      reader.readMessage(value,proto.TBoundedBy.deserializeBinaryFromReader);
      msg.setBoundedby(value);
      break;
    case 2:
      var value = new proto.Member;
      reader.readMessage(value,proto.Member.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 3:
      var value = new proto.Header;
      reader.readMessage(value,proto.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 4:
      var value = new proto.Foliation;
      reader.readMessage(value,proto.Foliation.deserializeBinaryFromReader);
      msg.setFoliation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MovingFeatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MovingFeatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MovingFeatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MovingFeatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoundedby();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TBoundedBy.serializeBinaryToWriter
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Member.serializeBinaryToWriter
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Header.serializeBinaryToWriter
    );
  }
  f = message.getFoliation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Foliation.serializeBinaryToWriter
    );
  }
};


/**
 * optional TBoundedBy boundedBy = 1;
 * @return {?proto.TBoundedBy}
 */
proto.MovingFeatures.prototype.getBoundedby = function() {
  return /** @type{?proto.TBoundedBy} */ (
    jspb.Message.getWrapperField(this, proto.TBoundedBy, 1));
};


/** @param {?proto.TBoundedBy|undefined} value */
proto.MovingFeatures.prototype.setBoundedby = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.MovingFeatures.prototype.clearBoundedby = function() {
  this.setBoundedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MovingFeatures.prototype.hasBoundedby = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Member members = 2;
 * @return {!Array<!proto.Member>}
 */
proto.MovingFeatures.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.Member>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Member, 2));
};


/** @param {!Array<!proto.Member>} value */
proto.MovingFeatures.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Member=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Member}
 */
proto.MovingFeatures.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Member, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.MovingFeatures.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * optional Header header = 3;
 * @return {?proto.Header}
 */
proto.MovingFeatures.prototype.getHeader = function() {
  return /** @type{?proto.Header} */ (
    jspb.Message.getWrapperField(this, proto.Header, 3));
};


/** @param {?proto.Header|undefined} value */
proto.MovingFeatures.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.MovingFeatures.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MovingFeatures.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Foliation foliation = 4;
 * @return {?proto.Foliation}
 */
proto.MovingFeatures.prototype.getFoliation = function() {
  return /** @type{?proto.Foliation} */ (
    jspb.Message.getWrapperField(this, proto.Foliation, 4));
};


/** @param {?proto.Foliation|undefined} value */
proto.MovingFeatures.prototype.setFoliation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.MovingFeatures.prototype.clearFoliation = function() {
  this.setFoliation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MovingFeatures.prototype.hasFoliation = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TBoundedBy.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TBoundedBy.prototype.toObject = function(opt_includeInstance) {
  return proto.TBoundedBy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TBoundedBy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TBoundedBy.toObject = function(includeInstance, msg) {
  var f, obj = {
    srsname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lowercornerList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    uppercornerList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    beginposition: (f = msg.getBeginposition()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    endposition: (f = msg.getEndposition()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TBoundedBy}
 */
proto.TBoundedBy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TBoundedBy;
  return proto.TBoundedBy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TBoundedBy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TBoundedBy}
 */
proto.TBoundedBy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrsname(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setLowercornerList(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setUppercornerList(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setBeginposition(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEndposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TBoundedBy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TBoundedBy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TBoundedBy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TBoundedBy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrsname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLowercornerList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getUppercornerList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getBeginposition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndposition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string srsName = 1;
 * @return {string}
 */
proto.TBoundedBy.prototype.getSrsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TBoundedBy.prototype.setSrsname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated float lowerCorner = 2;
 * @return {!Array<number>}
 */
proto.TBoundedBy.prototype.getLowercornerList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array<number>} value */
proto.TBoundedBy.prototype.setLowercornerList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.TBoundedBy.prototype.addLowercorner = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.TBoundedBy.prototype.clearLowercornerList = function() {
  this.setLowercornerList([]);
};


/**
 * repeated float upperCorner = 3;
 * @return {!Array<number>}
 */
proto.TBoundedBy.prototype.getUppercornerList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array<number>} value */
proto.TBoundedBy.prototype.setUppercornerList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.TBoundedBy.prototype.addUppercorner = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.TBoundedBy.prototype.clearUppercornerList = function() {
  this.setUppercornerList([]);
};


/**
 * optional google.protobuf.Timestamp beginPosition = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.TBoundedBy.prototype.getBeginposition = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.TBoundedBy.prototype.setBeginposition = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.TBoundedBy.prototype.clearBeginposition = function() {
  this.setBeginposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TBoundedBy.prototype.hasBeginposition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp endPosition = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.TBoundedBy.prototype.getEndposition = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.TBoundedBy.prototype.setEndposition = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.TBoundedBy.prototype.clearEndposition = function() {
  this.setEndposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TBoundedBy.prototype.hasEndposition = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
    movingfeature: (f = msg.getMovingfeature()) && proto.MovingFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Member}
 */
proto.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Member;
  return proto.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Member}
 */
proto.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MovingFeature;
      reader.readMessage(value,proto.MovingFeature.deserializeBinaryFromReader);
      msg.setMovingfeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMovingfeature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MovingFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional MovingFeature movingFeature = 1;
 * @return {?proto.MovingFeature}
 */
proto.Member.prototype.getMovingfeature = function() {
  return /** @type{?proto.MovingFeature} */ (
    jspb.Message.getWrapperField(this, proto.MovingFeature, 1));
};


/** @param {?proto.MovingFeature|undefined} value */
proto.Member.prototype.setMovingfeature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Member.prototype.clearMovingfeature = function() {
  this.setMovingfeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Member.prototype.hasMovingfeature = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MovingFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.MovingFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MovingFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MovingFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MovingFeature}
 */
proto.MovingFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MovingFeature;
  return proto.MovingFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MovingFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MovingFeature}
 */
proto.MovingFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MovingFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MovingFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MovingFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MovingFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.MovingFeature.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MovingFeature.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.MovingFeature.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MovingFeature.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.MovingFeature.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.MovingFeature.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Header.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    varyingattrdefsList: jspb.Message.toObjectList(msg.getVaryingattrdefsList(),
    proto.AttrDef.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Header}
 */
proto.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Header;
  return proto.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Header}
 */
proto.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AttrDef;
      reader.readMessage(value,proto.AttrDef.deserializeBinaryFromReader);
      msg.addVaryingattrdefs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVaryingattrdefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.AttrDef.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AttrDef VaryingAttrDefs = 1;
 * @return {!Array<!proto.AttrDef>}
 */
proto.Header.prototype.getVaryingattrdefsList = function() {
  return /** @type{!Array<!proto.AttrDef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AttrDef, 1));
};


/** @param {!Array<!proto.AttrDef>} value */
proto.Header.prototype.setVaryingattrdefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.AttrDef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AttrDef}
 */
proto.Header.prototype.addVaryingattrdefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.AttrDef, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Header.prototype.clearVaryingattrdefsList = function() {
  this.setVaryingattrdefsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AttrDef.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AttrDef.prototype.toObject = function(opt_includeInstance) {
  return proto.AttrDef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AttrDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AttrDef.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    simpletypeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    attrannotation: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AttrDef}
 */
proto.AttrDef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AttrDef;
  return proto.AttrDef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AttrDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AttrDef}
 */
proto.AttrDef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSimpletype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttrannotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AttrDef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AttrDef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AttrDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AttrDef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSimpletypeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAttrannotation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.AttrDef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AttrDef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string simpleType = 2;
 * @return {!Array<string>}
 */
proto.AttrDef.prototype.getSimpletypeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.AttrDef.prototype.setSimpletypeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.AttrDef.prototype.addSimpletype = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.AttrDef.prototype.clearSimpletypeList = function() {
  this.setSimpletypeList([]);
};


/**
 * optional string attrAnnotation = 3;
 * @return {string}
 */
proto.AttrDef.prototype.getAttrannotation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.AttrDef.prototype.setAttrannotation = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Foliation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Foliation.prototype.toObject = function(opt_includeInstance) {
  return proto.Foliation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Foliation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Foliation.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordertype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    trajectoryList: jspb.Message.toObjectList(msg.getTrajectoryList(),
    proto.AbstractTrajectory.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Foliation}
 */
proto.Foliation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Foliation;
  return proto.Foliation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Foliation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Foliation}
 */
proto.Foliation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.OrderType} */ (reader.readEnum());
      msg.setOrdertype(value);
      break;
    case 2:
      var value = new proto.AbstractTrajectory;
      reader.readMessage(value,proto.AbstractTrajectory.deserializeBinaryFromReader);
      msg.addTrajectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Foliation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Foliation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Foliation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Foliation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdertype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTrajectoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.AbstractTrajectory.serializeBinaryToWriter
    );
  }
};


/**
 * optional OrderType orderType = 1;
 * @return {!proto.OrderType}
 */
proto.Foliation.prototype.getOrdertype = function() {
  return /** @type {!proto.OrderType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.OrderType} value */
proto.Foliation.prototype.setOrdertype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated AbstractTrajectory trajectory = 2;
 * @return {!Array<!proto.AbstractTrajectory>}
 */
proto.Foliation.prototype.getTrajectoryList = function() {
  return /** @type{!Array<!proto.AbstractTrajectory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AbstractTrajectory, 2));
};


/** @param {!Array<!proto.AbstractTrajectory>} value */
proto.Foliation.prototype.setTrajectoryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.AbstractTrajectory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AbstractTrajectory}
 */
proto.Foliation.prototype.addTrajectory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.AbstractTrajectory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Foliation.prototype.clearTrajectoryList = function() {
  this.setTrajectoryList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AbstractTrajectory.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AbstractTrajectory.prototype.toObject = function(opt_includeInstance) {
  return proto.AbstractTrajectory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AbstractTrajectory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AbstractTrajectory.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mfidref: jspb.Message.getFieldWithDefault(msg, 2, ""),
    start: jspb.Message.getFieldWithDefault(msg, 3, 0),
    end: jspb.Message.getFieldWithDefault(msg, 4, 0),
    poslistList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    attrList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    interpolation: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AbstractTrajectory}
 */
proto.AbstractTrajectory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AbstractTrajectory;
  return proto.AbstractTrajectory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AbstractTrajectory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AbstractTrajectory}
 */
proto.AbstractTrajectory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMfidref(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStart(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEnd(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setPoslistList(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAttr(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterpolation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AbstractTrajectory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AbstractTrajectory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AbstractTrajectory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AbstractTrajectory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMfidref();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getPoslistList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getAttrList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getInterpolation();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.AbstractTrajectory.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AbstractTrajectory.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mfIdRef = 2;
 * @return {string}
 */
proto.AbstractTrajectory.prototype.getMfidref = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AbstractTrajectory.prototype.setMfidref = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 start = 3;
 * @return {number}
 */
proto.AbstractTrajectory.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AbstractTrajectory.prototype.setStart = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 end = 4;
 * @return {number}
 */
proto.AbstractTrajectory.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.AbstractTrajectory.prototype.setEnd = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated float posList = 5;
 * @return {!Array<number>}
 */
proto.AbstractTrajectory.prototype.getPoslistList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array<number>} value */
proto.AbstractTrajectory.prototype.setPoslistList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.AbstractTrajectory.prototype.addPoslist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.AbstractTrajectory.prototype.clearPoslistList = function() {
  this.setPoslistList([]);
};


/**
 * repeated string attr = 6;
 * @return {!Array<string>}
 */
proto.AbstractTrajectory.prototype.getAttrList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.AbstractTrajectory.prototype.setAttrList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.AbstractTrajectory.prototype.addAttr = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.AbstractTrajectory.prototype.clearAttrList = function() {
  this.setAttrList([]);
};


/**
 * optional string interpolation = 7;
 * @return {string}
 */
proto.AbstractTrajectory.prototype.getInterpolation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.AbstractTrajectory.prototype.setInterpolation = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.OrderType = {
  TIME: 0,
  SEQUENTIAL: 1
};

goog.object.extend(exports, proto);
